//Time Taken by statements is constant like if i=0 and i=i+6 then considered as O(1) t.c
/*for (i = 0; i < n; ++i) {
    console.log(i);
}*/ --->o(n)-t.c
/*for (let i = 1; i < n; i *= 2) {
    console.log(i);
}--->here the loop will run (logn)-1 times as --
1st iteration, i = 1
2nd iteration, i = 2
3rd iteration, i = 4
4th iteration, i = 8
.
.
kth iteration, i=2^(k-1)
so, 2^(k-1)<n, apply log on both sides ---
(k-1)log 2=log n
k-1 = log n
so complexity = O(log n) */


///Why should we care about Space Complexity? => Good Algo. ∝ low space complexity

Comparisions Between Algorithms ----------------------------- 

$- function fibonacci(n) : it can be solved either recursively or iteratively.
Recursive Approach--
fibo(n)
{
if(n<=1)return n;
else return fibo(n-1)+fibo(n-2);
}
for lower bound t.c= 2^(n/2) and upper bound = 2^(n).
T(n)=t(n-1)+t(n-2)//let t(n-1)=t(n-2)
T(n)=2*t(n-1) + c
    =2*(2t(n-2)+c)+c
    =4*t(n-2) + 3c
    =8*t(n-3) + 7c
 overall => [2^k *t(n-k) +(2^k-1) *c)
let n-k=0 so, n=k.
=> 2^n *t(0) + (2^n-1) *c)
=> 2^n(1+c)-c // ( 1+c ) -c = constants 
hence time complexity = o(2^n) or exponential.
Space complexity = prop. to maxm depth of the recursion tree i.e, maximum number of elements that can be present in the implicit function call stack.
s.c for recursive approach = O(n) 

ITERATIVE APPROACH: - 
fibo(n)
{
int x=0,y=1,z;
if(n==0) return x;
if(n==1) return y;
for(i=2;i<=n;++i)// n=5// 0 1 1 2 3 
{
z=x+y;//z=1//z=2//z=3
x=y;//x=1//x=1//x=2
y=z;//y=1//y=2//y=3
}
return z;//return 3;
}
hence in this approach t.c = O(n) and fixed space for 4 variables so s.c = O(1)
therefore iterative approach is better than recursive approach.
*/
$- PRIME NUMBER : The number having only 2 factors 1 & itself, e.g., 2, 3, 5,7,11,13,17....
logic : 1
function isPrime(n) {
 for (let i = 2; i < n; ++i) {
    if (n % i === 0) {
        return false;
    }
 }
 return true;
}///////////////// loop will run n-2 times so t.c=O(n)
logic 2: 
function isPrime(n) {
  for (let i = 2; i <= Math.sqrt(n); ++i) {
      if (n % i === 0) {
          return false;
      }
  }
  return true;
}//////////////loop will run root(n-2) time 
HENCE LOGIC 2 ISMORE EFFICIENT.

///////////////////////There is no point in using more space to solve a problem if, we can do the same with lesser space complexity//////////////////////////////
CALCULATE SPACE AND TIME COMPLEXITY OF FUNCTIONS.
Q1. arr[]
for(i=0;i<n;++i)
arr.push(i);
--> T.C = O(n), S.C = Here the array will take n space, HENCE Space Complexity: O(n)
q2. arr[]
for(i=0;i<n;++i)
{
for(int j=0;i<n;j++)
arr.push(i+j);
}
--> T.C = O(n^2), s.c = O(n^2)
q3. arr[]
   for (let i = 1; i < n; i *= 2) {
    arr.push(i);
--> T.C = O(log n), S.C = O(logn)//Here the array will take (log n)-1 space
--------Similar to Time complexity, Space complexity also plays a crucial role in determining the efficiency of an algorithm/program.
-------If an algorithm takes up some extra time, you can still wait for its execution.
------But, if a program takes up a lot of memory space, then due to the machine’s memory limitation it will not run.
PROBLEMS : https://medium.com/@manishsundriyal/overview-time-space-complexity-f973513b701e




